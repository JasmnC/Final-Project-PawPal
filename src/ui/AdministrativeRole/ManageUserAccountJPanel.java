/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.AdministrativeRole;


import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.EcoSystem.EcoSystem;
import model.Enterprise.Enterprise;
import model.Network.Network;
import model.Organization.Organization;
import model.Role.Role;
import model.UserAccount.UserAccount;

/**
 *
 * @author Administrator
 */
public class ManageUserAccountJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageUserAccountJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem ecoSystem;

    public ManageUserAccountJPanel(JPanel userProcessContainer, EcoSystem ecosystem) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.ecoSystem = ecosystem;
        
        cmbNetworkList.removeAllItems();
        cmbEnterprise.removeAllItems();
        cmbOrg.removeAllItems();
        cmbRoles.removeAllItems();
        
        populateNetworkCombo();
        populateUserAccountsTable();

        
//        this.business = business;
//        this.container = container;
//
//        popOrganizationComboBox();
//        
//        Organization organization = (Organization) cmbEnterprise.getSelectedItem();
//        if (organization != null) {
//            populateEmployeeComboBox(organization);
//            populateRoleComboBox(organization);
//        }
//
//        popUserAccountsTable();
    }

//    public void popOrganizationComboBox() {
//        cmbEnterprise.removeAllItems();
//
//        for (Organization organization : business.getOrganizationDirectory().getOrganizationList()) {
//            cmbEnterprise.addItem(organization);
//        }
//    }
//
//    public void populateEmployeeComboBox(Organization organization) {
//        cmbOrg.removeAllItems();
//
//        for (Employee employee : organization.getEmployeeDirectory().getEmployeeList()) {
//            cmbOrg.addItem(employee);
//        }
//    }
//
//    private void populateRoleComboBox(Organization organization) {
//        cmbRoles.removeAllItems();
//        for (Role role : organization.getSupportedRole()) {
//            cmbRoles.addItem(role);
//        }
//    }
//
    
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblUsers = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblUsersList = new javax.swing.JLabel();
        cmbOrg = new javax.swing.JComboBox();
        lblEmployee = new javax.swing.JLabel();
        lblRole = new javax.swing.JLabel();
        cmbRoles = new javax.swing.JComboBox();
        lblCreateUser = new javax.swing.JLabel();
        lblOrganizationPicker = new javax.swing.JLabel();
        lblOrganization = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        cmbNetworkList = new javax.swing.JComboBox();
        cmbEnterprise = new javax.swing.JComboBox();
        txtUserName = new javax.swing.JTextField();
        pwdUser = new javax.swing.JPasswordField();
        btnCreateUser = new javax.swing.JButton();
        lblPassword = new javax.swing.JLabel();

        tblUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User Name", "Role", "Organization", "Enterprise", "Network"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblUsers);
        if (tblUsers.getColumnModel().getColumnCount() > 0) {
            tblUsers.getColumnModel().getColumn(0).setResizable(false);
            tblUsers.getColumnModel().getColumn(1).setResizable(false);
            tblUsers.getColumnModel().getColumn(2).setResizable(false);
            tblUsers.getColumnModel().getColumn(3).setResizable(false);
            tblUsers.getColumnModel().getColumn(4).setResizable(false);
        }

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblTitle.setText("Manage Users");

        lblUsersList.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblUsersList.setText("Users List:");

        cmbOrg.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbOrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOrgActionPerformed(evt);
            }
        });

        lblEmployee.setText("Organization:");

        lblRole.setText("Role:");

        cmbRoles.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblCreateUser.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblCreateUser.setText("New User:");

        lblOrganizationPicker.setText("Network:");

        lblOrganization.setText("Enterprise:");

        lblUserName.setText("User Name:");

        cmbNetworkList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbNetworkList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbNetworkListActionPerformed(evt);
            }
        });

        cmbEnterprise.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbEnterprise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEnterpriseActionPerformed(evt);
            }
        });

        txtUserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserNameActionPerformed(evt);
            }
        });

        pwdUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwdUserActionPerformed(evt);
            }
        });

        btnCreateUser.setText("Create");
        btnCreateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateUserActionPerformed(evt);
            }
        });

        lblPassword.setText("Password:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCreateUser)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUsersList)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(18, 18, 18)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblRole)
                                    .addComponent(lblEmployee))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbOrg, 0, 242, Short.MAX_VALUE)
                                    .addComponent(cmbRoles, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblOrganization)
                                    .addComponent(lblOrganizationPicker))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbEnterprise, 0, 242, Short.MAX_VALUE)
                                    .addComponent(cmbNetworkList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnCreateUser)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblPassword)
                                    .addComponent(lblUserName))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtUserName)
                                    .addComponent(pwdUser, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(lblTitle))
                .addGap(18, 18, 18)
                .addComponent(lblUsersList)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblCreateUser)
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblOrganizationPicker)
                            .addComponent(cmbNetworkList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblOrganization)
                            .addComponent(cmbEnterprise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmployee)
                            .addComponent(cmbOrg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblRole)
                            .addComponent(cmbRoles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUserName)
                            .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPassword)
                            .addComponent(pwdUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnCreateUser)))
                .addContainerGap(126, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateUserActionPerformed
        
//        String userName = txtUserName.getText();
//        String password = txtPassword.getText();
//        
//        Network network = (Network) cmbNetworkList.getSelectedItem();
//        
//        if (network != null) {
//            if (cmbEnterprise.getSelectedItem() != null) {
//                String selectedEntOption = (String) cmbEnterprise.getSelectedItem();
//                String enterpriseName = selectedEntOption.split("\\s\\|\\s")[1];            
//                Enterprise enterprise = network.getEnterpriseDirectory().getEnterpriseByName(enterpriseName);
//
//                if (cmbOrg.getSelectedItem()!= null) {
//                    String selectedOrgOption = cmbOrg.getSelectedItem().toString();
//                    String orgName = selectedOrgOption.split("\\s\\|\\s")[1];
//                    Organization organization = enterprise.getOrganizationDirectory().getOrganizationByName(orgName);
//
//                    if (organization != null){
//                        if((!userName.equals("")) || (!userName.equals(""))){
//                            if(ecoSystem.getUserAccountDirectory().userNameIsUnique(userName)){
//                                Role role = (Role) cmbRoles.getSelectedItem();
//                                ecoSystem.getUserAccountDirectory().createUserAccount(userName, password, role, network, enterprise, organization);
//                                JOptionPane.showMessageDialog(null, "User Account added successfully.", "Information", JOptionPane.INFORMATION_MESSAGE);
//                                txtUserName.setText("");
//                                txtPassword.setText("");
//                                for (UserAccount ua : ecoSystem.getUserAccountDirectory().getUserAccountList()){
//                                    System.out.println(ua);
//                                }
//                                    } else {                            
//                                        JOptionPane.showMessageDialog(null, "Username already existed", "Warning", JOptionPane.WARNING_MESSAGE);
//                                    } 
//                                } else {
//                                JOptionPane.showMessageDialog(null, "Username & Password cannot be empty","Warning",JOptionPane.WARNING_MESSAGE);
//                                }
//                        } else {
//                        JOptionPane.showMessageDialog(null, "Please select where you wish to add the account", "Warning", JOptionPane.WARNING_MESSAGE);
//                    }
//                } else {
//                JOptionPane.showMessageDialog(null, "Network cannot be empty", "Warning", JOptionPane.WARNING_MESSAGE);
//            }  
//        } 
//    }
        

        try{
            
            String userName = txtUserName.getText();
            String password = String.valueOf(pwdUser.getPassword());

            Network network = (Network) cmbNetworkList.getSelectedItem();

            String selectedEntOption = (String) cmbEnterprise.getSelectedItem();
            String enterpriseName = selectedEntOption.split("\\s\\|\\s")[1];            
            Enterprise enterprise = network.getEnterpriseDirectory().getEnterpriseByName(enterpriseName);

            String selectedOrgOption = cmbOrg.getSelectedItem().toString();
            String orgName = selectedOrgOption.split("\\s\\|\\s")[1];
            Organization organization = enterprise.getOrganizationDirectory().getOrganizationByName(orgName);

            if((!userName.isEmpty()) && (!password.isEmpty())){
                if(ecoSystem.getUserAccountDirectory().userNameIsUnique(userName)){
                    Role role = (Role) cmbRoles.getSelectedItem();
                    ecoSystem.getUserAccountDirectory().createUserAccount(userName, password, role, network, enterprise, organization);
                    JOptionPane.showMessageDialog(null, "User Account added successfully.", "Information", JOptionPane.INFORMATION_MESSAGE);
                    txtUserName.setText("");
                    pwdUser.setText("");
                    populateUserAccountsTable();
                } else {                            
                    JOptionPane.showMessageDialog(null, "Username already existed", "Warning", JOptionPane.WARNING_MESSAGE);
                } 
            } else {
                JOptionPane.showMessageDialog(null, "Username & Password cannot be empty","Warning",JOptionPane.WARNING_MESSAGE);
            }
        
        } catch (Exception e){
            JOptionPane.showMessageDialog(null, "Network / Enterprise / Organization cannot be empty","Warning",JOptionPane.WARNING_MESSAGE);
        }
        
        
        
        
    }//GEN-LAST:event_btnCreateUserActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        
    }//GEN-LAST:event_btnBackActionPerformed

    private void cmbEnterpriseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEnterpriseActionPerformed

        populateOrgCombo();

    }//GEN-LAST:event_cmbEnterpriseActionPerformed

    private void cmbOrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrgActionPerformed
        // TODO add your handling code here:

        populateRoleCombo();

    }//GEN-LAST:event_cmbOrgActionPerformed

    private void cmbNetworkListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbNetworkListActionPerformed

        populateEnterpriseCombo();

    }//GEN-LAST:event_cmbNetworkListActionPerformed

    private void pwdUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwdUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pwdUserActionPerformed

    private void txtUserNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserNameActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreateUser;
    private javax.swing.JComboBox cmbEnterprise;
    private javax.swing.JComboBox cmbNetworkList;
    private javax.swing.JComboBox cmbOrg;
    private javax.swing.JComboBox cmbRoles;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCreateUser;
    private javax.swing.JLabel lblEmployee;
    private javax.swing.JLabel lblOrganization;
    private javax.swing.JLabel lblOrganizationPicker;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JLabel lblUsersList;
    private javax.swing.JPasswordField pwdUser;
    private javax.swing.JTable tblUsers;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables

    private void populateNetworkCombo() {
    
        cmbNetworkList.removeAllItems();

        if (!ecoSystem.getNetworkList().isEmpty()){
            for (Network n : ecoSystem.getNetworkList()){
                cmbNetworkList.addItem(n);
            }
        }
    }

    private void populateEnterpriseCombo() {
        
        cmbEnterprise.removeAllItems();
        
        Network network = (Network) cmbNetworkList.getSelectedItem();
        
        if (network != null ){
            for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()){
                cmbEnterprise.addItem(e.getType() + " | " + e);
            }
        }
    }

    private void populateOrgCombo() {
        
        cmbOrg.removeAllItems();
        
        Network network = (Network) cmbNetworkList.getSelectedItem();
                
        if (cmbEnterprise.getSelectedItem() != null) {
            String selectedOption = (String) cmbEnterprise.getSelectedItem();
            String enterpriseName = selectedOption.split("\\s\\|\\s")[1];            
            Enterprise enterprise = network.getEnterpriseDirectory().getEnterpriseByName(enterpriseName);
            
            for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()){
                cmbOrg.addItem(o.getType() + " | " + o);
            }
        }
    }

    private void populateRoleCombo() {

        cmbRoles.removeAllItems();
        
        Network network = (Network) cmbNetworkList.getSelectedItem();
        
        if (cmbEnterprise.getSelectedItem() != null) {
            String selectedEntOption = (String) cmbEnterprise.getSelectedItem();
            String enterpriseName = selectedEntOption.split("\\s\\|\\s")[1];            
            Enterprise enterprise = network.getEnterpriseDirectory().getEnterpriseByName(enterpriseName);
        
            if (cmbOrg.getSelectedItem()!= null) {
                String selectedOrgOption = cmbOrg.getSelectedItem().toString();
                String orgName = selectedOrgOption.split("\\|\\s")[1];
                Organization organization = enterprise.getOrganizationDirectory().getOrganizationByName(orgName);

                for (Role role : organization.getSupportedRole()) {
                    cmbRoles.addItem(role);
                }
                
            }
        }
    }
    
    public void populateUserAccountsTable() {

        DefaultTableModel model = (DefaultTableModel) tblUsers.getModel();
        model.setRowCount(0);

        for (UserAccount ua : ecoSystem.getUserAccountDirectory().getUserAccountList()){
                Object row[] = new Object[5];
                row[0] = ua;
                row[1] = ua.getRole();
                row[2] = ua.getOrgainization();
                row[3] = ua.getEnterprise();
                row[4] = ua.getNetwork();
                model.addRow(row);
            }
        }
}
